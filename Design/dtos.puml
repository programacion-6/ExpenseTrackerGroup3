@startuml dtos

package "DTOs" {
    class ResponseUser {
        + Name: string
        + Email: string
        + FromDomain(User user): ResponseUser
    }

    class CreateUser {
        + Name: string
        + Email: string
        + Password: string
        + ToDomain(): User
    }

    class ResponseExpense {
        + Id : Guid
        + UserId : Guid
        + Amount : decimal
        + Description : string
        + Category : string
        + Date: DateTime
        + CreatedAt : DateTime
        + FromDomain(Expense expense): ResponseExpense
    }

    class CreateExpense {
        + Amount : decimal
        + Description : string
        + Category : string
        + Date: DateTime
        + CreatedAt : DateTime
        + RecurringExpense: bool
        + ToDomain(): Expense
    }

    class ResponseIncome {
        + Id : Guid
        + UserId : Guid
        + Amount : decimal
        + Source : string
        + CreatedAt : DateTime
        + FromDomain(Income income): ResponseIncome
    }

    class CreateIncome {
        + Amount : decimal
        + Source : string
        + ToDomain(): Income
    }

    class ResponseBudget {
        + Id : Guid
        + UserId : Guid
        + Month : DateTime
        + BudgetAmount : decimal
        + AlertThreshold : decimal
        + FromDomain(Budget budget): ResponseBudget
    }

    class CreateBudget {
        + Month : DateTime
        + BudgetAmount : decimal
        + AlertThreshold : decimal
        + ToDomain(): Budget
    }

    class ResponseGoal {
        + Id : Guid
        + UserId : Guid
        + GoalAmount : decimal
        + DeadLine : DateTime
        + CurrentAmount : decimal
        + CreatedAt : DateTime
        + FromDomain(Goal goal): ResponseGoal
    }

    class CreateGoal {
        + GoalAmount : decimal
        + DeadLine : DateTime
        + CurrentAmount : decimal
        + CreatedAt : DateTime
        + ToDomain(): Goal
    }

    class BudgetStatus {
        + IsOverThreshold: bool
        + TotalBudget: decimal
        + TotalExpenses: decimal
        + AlertThreshold: decimal
        + Message: string
    }

    class ResetPassword {
        + Password: string
        + Token: string
        + FromDomain(ResetPassword reset): ResetPassword
    }

    class LoginRequest {
        + Email: string
        + Password: string
        + FromDomain(LoginRequest login): LoginRequest
    }

    class LoginResponse {
        + Email: string
        + Token: string
        + FromDomain(LoginResponse login): LoginResponse
    }

    class RequestResetPassword {
        + Email: string
        + FromDomain(RequestResetPassword request): RequestResetPassword
    }

    class ResponseUserUpdated {
        + Id: Guid
        + Name: string
        + Email: string
        + FromDomain(User user): ResponseUserUpdated
    }

    class UpdateIncome {
        + Amount: decimal?
        + Source: string?
        + ToDomain(Income income): Income
    }

    class UpdateUserDTO {
        + Name: string
        + Email: string
        + ToDomain(User existingUser): User
    }

    class MonthlySummary {
        + Month: DateTime
        + TotalIncome: decimal
        + TotalExpenses: decimal
        + RemainingBudget: decimal
        + FromDomain(MonthlySummary summary): MonthlySummary
}

@enduml