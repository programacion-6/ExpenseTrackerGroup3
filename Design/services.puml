@startuml services

package "services" {
    interface IUserService {
        + Task<User> UpdateProfile(Guid userId, CreateUser user)
        + Task<User> GetUserProfile(Guid userId)
    }

    class UserService implements IUserService {
        - IUserRepository _userRepository
        - PasswordHasher _passwordHasher
        - ServiceValidation _validation
        UserService(IUserRepository userRepository, ServiceValidation validation, PasswordHasher passwordHasher)
    }

    interface IAuthService {
        + Task<User> RegisterUser(CreateUser user)
        + Task<string> LoginUser(string email, string password)
        + Task<bool> RequestPasswordReset(string email)
        + Task<bool> ResetPassword(string token, string newPassword)
    }

    class AuthService implements IAuthService {
        - IUserRepository _userRepository
        - PasswordHasher _passwordHasher
        - JwtTokenGenerator _jwtTokenGenerator
        AuthService(IUserRepository userRepository, PasswordHasher passwordHasher, JwtTokenGenerator jwtTokenGenerator)
    }

    interface IExpenseService {
        + Task<Expense> AddExpense (Guid userId, CreateExpense expense)
        + Task<List<Expense>> GetUser Expenses(Guid userId)
        + Task<string> GetHighestSpendingCategory(Guid userId, string category)
        + Task<string> GetMostExpensiveMonth(Guid userId, DateTime month)
        + Task<bool> CheckRecurringExpense(Guid userId)
        + Task<bool> UpdateExpense(Guid expenseId, CreateExpense expense)
        + Task<bool> DeleteExpense(Guid expenseId)
    }

    class ExpenseService implements IExpenseService {
        - IExpenseRepository _expenseRepository
        - IValidation _validation
        ExpenseService(IExpenseRepository expenseRepository, IValidation validation)
    }

    interface IIncomeService {
        + Task<Income> AddIncome(Guid userId, CreateIncome income)
        + Task<List<Income>> GetUserIncomes(Guid userId)
        + Task<string> GetMonthlyIncome(Guid userId, DateTime month)
        + Task<bool> UpdateIncome(Guid incomeId, CreateIncome income)
        + Task<bool> DeleteIncome(Guid incomeId)
        + Task<Income> GetIncomeById(Guid incomeId)
    }

    class IncomeService implements IIncomeService {
        - IIncomeRepository _incomeRepository
        - IValidation _validation
        IncomeService(IIncomeRepository incomeRepository, IValidation validation)
    }

    interface IBudgetService {
        + Task<Budget> AddBudget(Guid userId, CreateBudget budget)
        + Task<Budget> GetBudgetUserByMonth(Guid userId, DateTime month)
        + Task<bool> UpdateBudget(Guid budgetId, CreateBudget budget)
        + Task<bool> DeleteBudget(Guid budgetId)
        + Task<bool> CheckBudgetStatus(Guid userId, DateTime month)
    }

    class BudgetService implements IBudgetService {
        - IBudgetRepository _budgetRepository
        - IValidation _validation
        BudgetService(IBudgetRepository budgetRepository, IValidation validation)
    }

    interface IGoalService {
        + Task<Goal> CreateGoal(Guid userId, CreateGoal goal)
        + Task<List<Goal>> GetGoals(Guid userId)
        + Task<List<Goal>> GetActiveGoals(Guid userId)
        + Task<Goal> GetGoalById(Guid goalId)
        + Task<bool> TrackGoalProgress(Guid userId, Guid goalId, decimal amount)
        + Task<bool> UpdateGoal(Guid goalId, CreateGoal goal)
        + Task<bool> DeleteGoal(Guid goalId)
    }

    class GoalService implements IGoalService {
        - IGoalRepository _goalRepository
        - IValidation _validation
        GoalService(IGoalRepository goalRepository, IValidation validation)
    }

}

@enduml