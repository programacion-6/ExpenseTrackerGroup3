@startuml repositories

package "repositories" {
    interface IRepository<T> {
        + Task<bool> CreateAsync(T item)
        + Task<bool> UpdateAsync(T item)
        + Task<bool> DeleteAsync(Guid id)
        + Task<T> GetByIdAsync(Guid Id)
        + Task<List<T>> GetAllAsync()
    }

    interface IUserRepository extends IRepository {
        + Task<bool> ResetPassword(string email)
        + Task<User> GetProfileByIdAsync(Guid id)
        + Task<bool> UpdateProfileAsync(User user)
    }

    class UserRepository implements IUserRepository {
        + Task<bool> CreateAsync(T item)
        + Task<bool> UpdateAsync(T item)
        + Task<bool> DeleteAsync(Guid id)
        + Task<T> GetByIdAsync(Guid Id)
        + Task<List<T>> GetAllAsync()
        + Task<bool> UpdateProfileAsync(User user)
    }

    interface IExpenseRepository extends IRepository {
        + task<string> GetHighestSpendingCategoryByUserId(Guid userId)
        + task<DateTime> GetMostExpensiveMonthByUserId(Guid userId)
    }

    class ExpenseRepository implements IExpenseRepository {
        + Task<bool> CreateAsync(T item)
        + Task<bool> UpdateAsync(T item)
        + Task<bool> DeleteAsync(Guid id)
        + Task<T> GetByIdAsync(Guid Id)
        + Task<List<T>> GetAllAsync()
        + Task<string> GetHighestSpendingCategoryByUserId(Guid userId, string category)
        + Task<DateTime> GetMostExpensiveMonthByUserId(Guid userId)
    }

    interface IIncomeRepository extends IRepository {
        + Task<string> GetMonthlyIncomeByUserId(Guid userId, DateTime month)
    }

    class IncomeRepository implements IIncomeRepository {
        + Task<bool> CreateAsync(T item)
        + Task<bool> UpdateAsync(T item)
        + Task<bool> DeleteAsync(Guid id)
        + Task<T> GetByIdAsync(Guid Id)
        + Task<List<T>> GetAllAsync()
        + Task<string> GetMonthlyIncomeByUserId(Guid userId, DateTime month)
    }

    interface IBudgetRepository extends IRepository {
        + Task<string> GetMonthlyBudgetByUserId(Guid userId, DateTime month)
    }

    class BudgetRepository implements IBudgetRepository {
        + Task<bool> CreateAsync(T item)
        + Task<bool> UpdateAsync(T item)
        + Task<bool> DeleteAsync(Guid id)
        + Task<T> GetByIdAsync(Guid Id)
        + Task<List<T>> GetAllAsync()
        + Task<string> GetMonthlyBudgetByUserId(Guid userId, DateTime month)
    }

    interface IGoalRepository extends IRepository {
        + Task<List<Goal>> GetActiveGoalsByUserId(Guid userId)
        + Task<decimal> GetGoalProgress(Guid goalId)
    }

    class GoalRepository implements IGoalRepository {
        + Task<bool> CreateAsync(T item)
        + Task<bool> UpdateAsync(T item)
        + Task<bool> DeleteAsync(Guid id)
        + Task<T> GetByIdAsync(Guid Id)
        + Task<List<T>> GetAllAsync()
        + Task<List<Goal>> GetActiveGoalsByUserId(Guid userId)
        + Task<decimal> GetGoalProgress(Guid goalId)
    }
}

@enduml